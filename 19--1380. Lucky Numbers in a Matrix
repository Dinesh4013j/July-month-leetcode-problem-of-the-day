Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.







class Solution:
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        n=len(matrix)
        m=len(matrix[0])
        mini=[0]*n
        maxi=[0]*m
        for i in range(n):
            mini[i]=min(matrix[i])
        for j in range(m):
            maxim=0
            for i in range(n):
                maxim=max(matrix[i][j],maxim)
            maxi[j]=maxim


        a=[]
        for i in range(n):
            for j in range(m):
                if matrix[i][j]==mini[i] and matrix[i][j]==maxi[j]:
                    a.append(matrix[i][j])
 
        return a
