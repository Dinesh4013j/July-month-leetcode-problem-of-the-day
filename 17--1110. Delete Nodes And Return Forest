Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def delNodes(self, root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:
        to_delete=set(to_delete)
        res=[]
        def helper(root ,is_root):
            if not root:
                return None
            rodelornot=root.val in to_delete
            if is_root and not rodelornot:
                res.append(root)
            root.left=helper(root.left,rodelornot)
            root.right=helper(root.right,rodelornot)
         
            return None if rodelornot else root
        helper(root,True)
        return res
        
