You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

 

Example 1:


Input: head = [0,3,1,0,4,5,2,0]
Output: [4,11]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 3 + 1 = 4.
- The sum of the nodes marked in red: 4 + 5 + 2 = 11.
Example 2:


Input: head = [0,1,0,3,0,2,2,0]
Output: [1,3,4]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 1 = 1.
- The sum of the nodes marked in red: 3 = 3.
- The sum of the nodes marked in yellow: 2 + 2 = 4


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy=ListNode(0)
        cur=dummy 
        temp1=head
        ans=0
        while temp1:
            while temp1!=None and temp1.val!=0:
                ans+=temp1.val
                temp1=temp1.next
            if ans>0:
                cur.next=ListNode(ans)
                cur=cur.next
                print(ans)
                ans=0
            if  temp1:
                temp1=temp1.next
        return dummy.next


        # temp1=head
        # temp2=head
        # ans=0
        # flag=True
        # while temp1:
        #     while temp2!=None and  temp2.val!=0:
        #         ans+=temp2.val
        #         temp2=temp2.next
        #         print(temp2.val)
        #     if ans==0:
        #         if temp2:
        #             temp2=temp2.next
        #             continue
        #         else:
        #             temp1.next=None
        #             break
        #     if  not flag:
        #         temp1=temp1.next
        #         flag=False
        #     temp1.val=ans
        #     flag=False
        #     ans=0
        #     if temp2:
        #         temp2=temp2.next        
        #     else:
        #         temp1.next=None
        #         break    
        # return head
