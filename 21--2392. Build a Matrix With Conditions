You are given a positive integer k. You are also given:

a 2D integer array rowConditions of size n where rowConditions[i] = [abovei, belowi], and
a 2D integer array colConditions of size m where colConditions[i] = [lefti, righti].
The two arrays contain integers from 1 to k.

You have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. The remaining cells should have the value 0.

The matrix should also satisfy the following conditions:

The number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from 0 to n - 1.
The number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from 0 to m - 1.
Return any matrix that satisfies the conditions. If no answer exists, return an empty matrix.

 class Solution:
    def buildMatrix(self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]) -> List[List[int]]:
        def helper(A):
            nxt, indegree = [set() for _ in range(k)], [0] * k
            dq, ans = collections.deque(), []
            A = set([tuple(a) for a in A])  
            for i, j in A:
                nxt[i - 1].add(j - 1)
                indegree[j - 1] += 1
            for i in range(k):
                if indegree[i] == 0:
                    dq.append(i)   
            while dq:
                cur = dq.popleft()
                ans.append(cur)
                for cand in nxt[cur]:
                    indegree[cand] -= 1
                    if indegree[cand] == 0:
                        dq.append(cand)       
            return ans if len(ans) == k else []
        
        ans1, ans2 = helper(rowConditions), helper(colConditions)
        if not ans1 or not ans2: 
            return []
        ans1, ans2 = helper(rowConditions), helper(colConditions)
        if not ans1 or not ans2: 
            return []

        A = [[0] * k for _ in range(k)]
        for i in range(k): 
            A[ans1.index(i)][ans2.index(i)] = i + 1
        return A
